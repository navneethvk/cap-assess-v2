rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user has a valid role and is not deactivated
    function isAuthenticatedAndAuthorized() {
      return request.auth != null &&
             request.auth.token.role is string && // Ensure 'role' claim exists and is a string
             request.auth.token.role != "Pending" &&
             request.auth.token.status != "deactivated";
    }

    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && request.auth.token.role == "Admin";
    }

    // Rule for the 'users' collection
    match /users/{userId} {
      // Users can read their own profile
      allow read: if request.auth != null && request.auth.uid == userId;

      // Admins can read any user's profile
      allow read: if isAdmin();

      // Users can update their own profile, but NOT change their role or status
      allow update: if request.auth != null && request.auth.uid == userId && request.auth.token.role != "Pending" &&
                    (!("role" in request.resource.data) || request.resource.data.role == resource.data.role) &&
                    (!("status" in request.resource.data) || request.resource.data.status == resource.data.status);

      // Admins can update any user's profile, including their role and status
      allow update: if isAdmin();
    }

    // Rule for the 'ccis' collection
    match /ccis/{cciId} {
      // Admins can read, write, and delete CCIs
      allow read, write, delete: if isAdmin();
    }

    // Rule for the 'cci_user_links' collection
    match /cci_user_links/{userId} {
      // Admins can read and write to the cci_user_links collection
      allow read, write, create, delete: if isAdmin();
      
      // Users can read their own assignments
      allow read: if request.auth != null && request.auth.uid == userId && isAuthenticatedAndAuthorized();
    }

    // Default rule for all other documents/collections.
    // Only allow read/write if the user is authenticated AND their role is NOT "Pending" AND their status is NOT "deactivated".
    // And now, also ensure the 'role' claim exists and is a string.
    match /{document=**} {
      allow read, write: if isAuthenticatedAndAuthorized();
    }
  }
}